// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer/Lexer.jflex

package fr.ubordeaux.arduinoCode;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements Parser.Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\3\u0100\1\u0e00\205\u0100\1\u0600\1\u0100\1\u0f00\1\u1000\1\u1100"+
    "\1\u1200\54\u0100\10\u1300\37\u0100\1\u0900\4\u0100\1\u1400\10\u0100"+
    "\1\u1500\2\u0100\1\u1600\1\u1700\1\u1200\1\u0100\1\u0500\1\u0100"+
    "\1\u1800\1\u1500\1\u0800\3\u0100\1\u1100\1\u1900\114\u0100\1\u1a00"+
    "\1\u1100\153\u0100\1\u1b00\11\u0100\1\u1c00\1\u1200\6\u0100\1\u1100"+
    "\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\4\1\23\0\1\2\1\3\2\0\1\4\1\5"+
    "\1\0\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\2\20\2\21\4\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\0\1\30\1\31\2\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\40\1\46\1\47\1\50\1\51\1\40"+
    "\1\52\3\40\1\53\1\0\1\54\1\0\1\55\1\0"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\40\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\40\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\40\1\105\1\106\1\107\7\0\1\1\u01da\0"+
    "\12\110\206\0\12\110\306\0\12\110\234\0\12\110\166\0"+
    "\12\110\140\0\12\110\166\0\12\110\106\0\12\110\u0116\0"+
    "\12\110\106\0\12\110\u0146\0\12\110\46\0\12\110\u012c\0"+
    "\12\110\200\0\12\110\246\0\12\110\6\0\12\110\266\0"+
    "\12\110\126\0\12\110\206\0\12\110\6\0\12\110\316\0"+
    "\2\1\u01a6\0\12\110\46\0\12\110\306\0\12\110\26\0"+
    "\12\110\126\0\12\110\u0196\0\12\110\6\0\u0100\1\240\0"+
    "\12\110\206\0\12\110\u012c\0\12\110\200\0\12\110\74\0"+
    "\12\110\220\0\12\110\166\0\12\110\146\0\12\110\206\0"+
    "\12\110\106\0\12\110\266\0\12\110\u0164\0\62\110\100\0"+
    "\12\110\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7424];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\1\13\2\14\1\15"+
    "\1\16\1\17\1\20\1\21\11\22\1\23\1\24\17\22"+
    "\1\25\1\26\1\27\1\30\1\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\0"+
    "\1\1\1\43\3\0\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\21\22\1\52\6\22\1\53\1\54\2\22\1\55"+
    "\14\22\1\56\1\57\1\60\1\0\1\61\1\0\1\61"+
    "\1\62\3\22\1\63\17\22\1\64\13\22\1\65\4\22"+
    "\1\66\5\22\1\67\1\22\1\70\3\22\1\71\5\22"+
    "\1\72\1\73\4\22\1\74\1\75\4\22\1\76\1\22"+
    "\1\77\1\100\1\101\1\102\2\22\1\103\1\104\10\22"+
    "\1\105\1\106\1\22\2\107\3\22\1\110\1\22\1\111"+
    "\4\22\1\112\1\113\5\22\1\114\1\22\1\115\4\22"+
    "\1\116\1\22\1\117\1\120\6\22\1\121\5\22\1\122"+
    "\1\123\1\124\1\125\5\22\1\126\2\22\1\127\1\22"+
    "\1\130\1\22\1\131\1\132\6\22\1\133\1\134\2\22"+
    "\1\135\1\22\1\136\4\22\1\137\2\22\1\140\1\22"+
    "\1\141\4\22\1\142\1\22\1\143\1\144\2\22\1\145"+
    "\2\22\1\146";

  private static int [] zzUnpackAction() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\111\0\111"+
    "\0\u01b6\0\u01ff\0\111\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c"+
    "\0\111\0\111\0\u03b5\0\u03fe\0\u0447\0\u0490\0\u04d9\0\u0522"+
    "\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f\0\u06d8\0\111\0\111"+
    "\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u08d7\0\u0920"+
    "\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f\0\111"+
    "\0\u0b68\0\111\0\111\0\333\0\111\0\111\0\u0bb1\0\111"+
    "\0\111\0\111\0\111\0\111\0\111\0\111\0\u0bfa\0\u0c43"+
    "\0\111\0\u0c8c\0\u0cd5\0\u0d1e\0\111\0\111\0\111\0\111"+
    "\0\111\0\u04d9\0\u0d67\0\u0db0\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4"+
    "\0\u0f1d\0\u0f66\0\u0faf\0\u0ff8\0\u1041\0\u108a\0\u10d3\0\u111c"+
    "\0\u1165\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364"+
    "\0\u13ad\0\u13f6\0\u0490\0\u143f\0\u1488\0\u14d1\0\u0490\0\u151a"+
    "\0\u1563\0\u15ac\0\u15f5\0\u163e\0\u1687\0\u16d0\0\u1719\0\u1762"+
    "\0\u17ab\0\u17f4\0\u183d\0\111\0\u1886\0\111\0\u18cf\0\u1918"+
    "\0\u1961\0\u1961\0\u0d1e\0\u19aa\0\u19f3\0\u1a3c\0\u0490\0\u1a85"+
    "\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd"+
    "\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u0490\0\u1ecc"+
    "\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082\0\u20cb\0\u2114"+
    "\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u2313\0\u0490"+
    "\0\u235c\0\u23a5\0\u23ee\0\u2437\0\u2480\0\111\0\u24c9\0\u0490"+
    "\0\u2512\0\u255b\0\u25a4\0\u0490\0\u25ed\0\u2636\0\u267f\0\u26c8"+
    "\0\u2711\0\u0490\0\u0490\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u0490"+
    "\0\u0490\0\u287e\0\u28c7\0\u2910\0\u2959\0\u0490\0\u29a2\0\u0490"+
    "\0\u0490\0\u0490\0\u0490\0\u29eb\0\u2a34\0\u0490\0\u0490\0\u2a7d"+
    "\0\u2ac6\0\u2b0f\0\u2b58\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c\0\u0490"+
    "\0\u2cc5\0\u2d0e\0\u0490\0\u2d57\0\u2da0\0\u2de9\0\u2e32\0\u0490"+
    "\0\u2e7b\0\u0490\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f\0\u0490\0\u0490"+
    "\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u310c\0\u0490\0\u3155\0\u0490"+
    "\0\u319e\0\u31e7\0\u3230\0\u3279\0\u0490\0\u32c2\0\u0490\0\u0490"+
    "\0\u330b\0\u3354\0\u339d\0\u33e6\0\u342f\0\u3478\0\u0490\0\u34c1"+
    "\0\u350a\0\u3553\0\u359c\0\u35e5\0\u0490\0\u0490\0\u0490\0\u0490"+
    "\0\u362e\0\u3677\0\u36c0\0\u3709\0\u3752\0\u0490\0\u379b\0\u37e4"+
    "\0\u0490\0\u382d\0\u0490\0\u3876\0\u0490\0\u0490\0\u38bf\0\u3908"+
    "\0\u3951\0\u399a\0\u39e3\0\u3a2c\0\u0490\0\u0490\0\u3a75\0\u3abe"+
    "\0\u0490\0\u3b07\0\u0490\0\u3b50\0\u3b99\0\u3be2\0\u3c2b\0\u0490"+
    "\0\u3c74\0\u3cbd\0\u0490\0\u3d06\0\u0490\0\u3d4f\0\u3d98\0\u3de1"+
    "\0\u3e2a\0\u0490\0\u3e73\0\u0490\0\u0490\0\u3ebc\0\u3f05\0\u0490"+
    "\0\u3f4e\0\u3f97\0\u0490";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\4\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\2\26\1\30"+
    "\1\26\1\31\1\32\1\26\1\33\2\26\1\34\1\35"+
    "\2\26\1\36\2\26\1\37\1\40\1\26\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\26\1\50\1\26"+
    "\1\51\2\26\1\52\1\53\1\54\1\55\1\26\1\56"+
    "\1\26\1\57\2\26\1\60\1\61\1\62\1\20\137\0"+
    "\1\63\62\0\3\64\1\65\105\64\26\0\1\66\67\0"+
    "\1\67\20\0\1\70\110\0\1\71\73\0\1\72\14\0"+
    "\1\73\75\0\1\74\12\0\1\75\76\0\1\76\104\0"+
    "\1\77\4\0\1\100\10\0\1\101\76\0\1\102\1\0"+
    "\5\20\10\0\1\103\26\0\1\103\20\0\1\104\4\0"+
    "\1\20\14\0\1\102\1\0\5\20\10\0\1\103\26\0"+
    "\1\103\25\0\1\20\25\0\1\105\1\106\110\0\1\107"+
    "\110\0\1\110\1\111\77\0\5\26\5\0\23\26\2\0"+
    "\30\26\22\0\2\112\3\26\5\0\23\26\2\0\30\26"+
    "\22\0\5\26\5\0\1\113\22\26\2\0\30\26\22\0"+
    "\5\26\5\0\7\26\1\114\13\26\2\0\30\26\22\0"+
    "\5\26\5\0\13\26\1\115\7\26\2\0\30\26\22\0"+
    "\5\26\5\0\14\26\1\116\6\26\2\0\30\26\22\0"+
    "\5\26\5\0\21\26\1\117\1\26\2\0\30\26\22\0"+
    "\5\26\5\0\7\26\1\120\13\26\2\0\30\26\22\0"+
    "\5\26\5\0\16\26\1\121\4\26\2\0\30\26\22\0"+
    "\5\26\5\0\23\26\2\0\15\26\1\122\6\26\1\123"+
    "\3\26\22\0\5\26\5\0\23\26\2\0\5\26\1\124"+
    "\10\26\1\125\1\26\1\126\6\26\1\127\22\0\5\26"+
    "\5\0\23\26\2\0\1\26\1\130\14\26\1\131\11\26"+
    "\22\0\5\26\5\0\23\26\2\0\5\26\1\132\3\26"+
    "\1\133\4\26\1\134\11\26\22\0\5\26\5\0\23\26"+
    "\2\0\13\26\1\135\1\26\1\136\12\26\22\0\5\26"+
    "\5\0\23\26\2\0\13\26\1\137\2\26\1\140\4\26"+
    "\1\141\4\26\22\0\5\26\5\0\23\26\2\0\5\26"+
    "\1\142\22\26\22\0\5\26\5\0\23\26\2\0\6\26"+
    "\1\143\6\26\1\144\12\26\22\0\5\26\5\0\23\26"+
    "\2\0\11\26\1\145\4\26\1\146\11\26\22\0\5\26"+
    "\5\0\23\26\2\0\6\26\1\147\21\26\22\0\5\26"+
    "\5\0\23\26\2\0\5\26\1\150\3\26\1\151\6\26"+
    "\1\152\2\26\1\153\4\26\22\0\5\26\5\0\23\26"+
    "\2\0\1\26\1\154\3\26\1\155\22\26\22\0\5\26"+
    "\5\0\23\26\2\0\5\26\1\156\2\26\1\157\11\26"+
    "\1\160\2\26\1\161\2\26\22\0\5\26\5\0\23\26"+
    "\2\0\15\26\1\162\12\26\22\0\5\26\5\0\23\26"+
    "\2\0\10\26\1\163\17\26\32\0\1\164\57\0\1\165"+
    "\30\0\1\166\62\0\10\77\1\167\100\77\1\100\1\0"+
    "\107\100\16\0\5\170\65\0\1\170\11\0\1\171\1\0"+
    "\1\171\2\0\5\172\65\0\1\172\16\0\5\173\5\0"+
    "\5\173\72\0\5\26\5\0\11\26\1\174\11\26\2\0"+
    "\30\26\22\0\5\26\5\0\5\26\1\175\15\26\2\0"+
    "\30\26\22\0\5\26\5\0\15\26\1\176\5\26\2\0"+
    "\30\26\22\0\5\26\5\0\22\26\1\177\2\0\30\26"+
    "\22\0\5\26\5\0\20\26\1\200\2\26\2\0\30\26"+
    "\22\0\5\26\5\0\13\26\1\201\7\26\2\0\30\26"+
    "\22\0\5\26\5\0\21\26\1\202\1\26\2\0\30\26"+
    "\22\0\5\26\5\0\23\26\2\0\1\26\1\203\26\26"+
    "\22\0\5\26\5\0\23\26\2\0\1\26\1\204\26\26"+
    "\22\0\5\26\5\0\23\26\2\0\7\26\1\205\20\26"+
    "\22\0\5\26\5\0\23\26\2\0\16\26\1\206\11\26"+
    "\22\0\5\26\5\0\23\26\2\0\5\26\1\207\22\26"+
    "\22\0\5\26\5\0\23\26\2\0\22\26\1\210\5\26"+
    "\22\0\5\26\5\0\23\26\2\0\21\26\1\211\6\26"+
    "\22\0\5\26\5\0\23\26\2\0\15\26\1\212\12\26"+
    "\22\0\5\26\5\0\23\26\2\0\13\26\1\213\14\26"+
    "\22\0\5\26\5\0\23\26\2\0\7\26\1\214\20\26"+
    "\22\0\5\26\5\0\23\26\2\0\23\26\1\215\4\26"+
    "\22\0\5\26\5\0\23\26\2\0\21\26\1\216\6\26"+
    "\22\0\5\26\5\0\23\26\2\0\4\26\1\217\16\26"+
    "\1\220\4\26\22\0\5\26\5\0\23\26\2\0\16\26"+
    "\1\221\4\26\1\222\4\26\22\0\5\26\5\0\23\26"+
    "\2\0\20\26\1\223\7\26\22\0\5\26\5\0\23\26"+
    "\2\0\15\26\1\224\12\26\22\0\5\26\5\0\23\26"+
    "\2\0\22\26\1\225\5\26\22\0\5\26\5\0\23\26"+
    "\2\0\22\26\1\226\5\26\22\0\5\26\5\0\23\26"+
    "\2\0\21\26\1\227\6\26\22\0\5\26\5\0\23\26"+
    "\2\0\15\26\1\230\1\231\11\26\22\0\5\26\5\0"+
    "\23\26\2\0\5\26\1\232\22\26\22\0\5\26\5\0"+
    "\23\26\2\0\15\26\1\233\12\26\22\0\5\26\5\0"+
    "\23\26\2\0\16\26\1\234\11\26\22\0\5\26\5\0"+
    "\23\26\2\0\22\26\1\235\5\26\22\0\5\26\5\0"+
    "\23\26\2\0\15\26\1\236\12\26\22\0\5\26\5\0"+
    "\23\26\2\0\22\26\1\237\5\26\22\0\5\26\5\0"+
    "\23\26\2\0\22\26\1\240\5\26\22\0\5\26\5\0"+
    "\23\26\2\0\16\26\1\241\11\26\22\0\5\26\5\0"+
    "\23\26\2\0\20\26\1\242\7\26\22\0\5\26\5\0"+
    "\23\26\2\0\11\26\1\243\16\26\22\0\5\26\5\0"+
    "\23\26\2\0\21\26\1\244\6\26\22\0\5\26\5\0"+
    "\23\26\2\0\11\26\1\245\16\26\32\0\1\246\62\0"+
    "\10\77\1\167\4\77\1\2\73\77\16\0\5\170\10\0"+
    "\1\103\26\0\1\103\25\0\1\170\16\0\5\172\65\0"+
    "\1\172\16\0\5\26\5\0\17\26\1\247\3\26\2\0"+
    "\30\26\22\0\5\26\5\0\6\26\1\250\14\26\2\0"+
    "\30\26\22\0\5\26\5\0\21\26\1\251\1\26\2\0"+
    "\30\26\22\0\5\26\5\0\15\26\1\252\5\26\2\0"+
    "\30\26\22\0\5\26\5\0\23\26\2\0\1\253\27\26"+
    "\22\0\5\26\5\0\3\26\1\254\17\26\2\0\30\26"+
    "\22\0\5\26\5\0\23\26\2\0\13\26\1\255\14\26"+
    "\22\0\5\26\5\0\23\26\2\0\11\26\1\256\16\26"+
    "\22\0\5\26\5\0\23\26\2\0\11\26\1\257\16\26"+
    "\22\0\5\26\5\0\23\26\2\0\13\26\1\260\14\26"+
    "\22\0\5\26\5\0\23\26\2\0\1\26\1\261\26\26"+
    "\22\0\5\26\5\0\23\26\2\0\5\26\1\262\22\26"+
    "\22\0\5\26\5\0\23\26\2\0\5\26\1\263\22\26"+
    "\22\0\5\26\5\0\23\26\2\0\22\26\1\264\5\26"+
    "\22\0\5\26\5\0\23\26\2\0\1\26\1\265\26\26"+
    "\22\0\5\26\5\0\23\26\2\0\11\26\1\266\16\26"+
    "\22\0\5\26\5\0\23\26\2\0\2\26\1\267\25\26"+
    "\22\0\5\26\5\0\23\26\2\0\5\26\1\270\22\26"+
    "\22\0\5\26\5\0\23\26\2\0\14\26\1\271\13\26"+
    "\22\0\5\26\5\0\23\26\2\0\1\26\1\272\26\26"+
    "\22\0\5\26\5\0\23\26\2\0\21\26\1\273\6\26"+
    "\22\0\5\26\5\0\23\26\2\0\5\26\1\274\22\26"+
    "\22\0\5\26\5\0\23\26\2\0\3\26\1\275\24\26"+
    "\22\0\5\26\5\0\23\26\2\0\3\26\1\276\24\26"+
    "\22\0\5\26\5\0\23\26\2\0\5\26\1\277\22\26"+
    "\22\0\5\26\5\0\23\26\2\0\22\26\1\300\5\26"+
    "\22\0\5\26\5\0\23\26\2\0\7\26\1\301\20\26"+
    "\22\0\5\26\5\0\23\26\2\0\17\26\1\302\10\26"+
    "\22\0\5\26\5\0\23\26\2\0\12\26\1\303\15\26"+
    "\22\0\5\26\5\0\12\26\1\304\10\26\2\0\30\26"+
    "\22\0\5\26\5\0\23\26\2\0\3\26\1\305\24\26"+
    "\22\0\5\26\5\0\23\26\2\0\3\26\1\306\15\26"+
    "\1\307\6\26\22\0\5\26\5\0\23\26\2\0\7\26"+
    "\1\310\20\26\22\0\5\26\5\0\23\26\2\0\23\26"+
    "\1\311\4\26\22\0\5\26\5\0\23\26\2\0\20\26"+
    "\1\312\7\26\22\0\5\26\5\0\23\26\2\0\11\26"+
    "\1\313\11\26\1\314\4\26\22\0\5\26\5\0\23\26"+
    "\2\0\22\26\1\315\5\26\22\0\5\26\5\0\23\26"+
    "\2\0\11\26\1\316\16\26\22\0\5\26\5\0\23\26"+
    "\2\0\13\26\1\317\14\26\22\0\5\26\5\0\3\26"+
    "\1\320\17\26\2\0\30\26\22\0\5\26\5\0\20\26"+
    "\1\321\2\26\2\0\30\26\22\0\5\26\5\0\21\26"+
    "\1\322\1\26\2\0\30\26\22\0\1\323\1\324\3\323"+
    "\5\0\1\325\22\26\2\0\30\26\22\0\5\26\5\0"+
    "\23\26\2\0\16\26\1\326\11\26\22\0\5\26\5\0"+
    "\23\26\2\0\13\26\1\327\14\26\22\0\5\26\5\0"+
    "\23\26\2\0\15\26\1\330\12\26\22\0\5\26\5\0"+
    "\23\26\2\0\5\26\1\331\22\26\22\0\5\26\5\0"+
    "\23\26\2\0\12\26\1\332\15\26\22\0\5\26\5\0"+
    "\23\26\2\0\11\26\1\333\16\26\22\0\5\26\5\0"+
    "\23\26\2\0\27\26\1\334\22\0\5\26\5\0\23\26"+
    "\2\0\22\26\1\335\5\26\22\0\5\26\5\0\23\26"+
    "\2\0\13\26\1\336\14\26\22\0\5\26\5\0\23\26"+
    "\2\0\22\26\1\337\5\26\22\0\5\26\5\0\23\26"+
    "\2\0\10\26\1\340\17\26\22\0\5\26\5\0\23\26"+
    "\2\0\1\26\1\341\26\26\22\0\5\26\5\0\23\26"+
    "\2\0\22\26\1\342\5\26\22\0\5\26\5\0\23\26"+
    "\2\0\7\26\1\343\20\26\22\0\5\26\5\0\23\26"+
    "\2\0\16\26\1\344\11\26\22\0\5\26\5\0\23\26"+
    "\2\0\5\26\1\345\22\26\22\0\5\26\5\0\23\26"+
    "\2\0\5\26\1\346\22\26\22\0\5\26\5\0\23\26"+
    "\2\0\20\26\1\347\7\26\22\0\5\26\5\0\23\26"+
    "\2\0\22\26\1\350\5\26\22\0\5\26\5\0\23\26"+
    "\2\0\15\26\1\351\12\26\22\0\5\26\5\0\23\26"+
    "\2\0\3\26\1\352\24\26\22\0\5\26\5\0\23\26"+
    "\2\0\3\26\1\353\24\26\22\0\5\26\5\0\23\26"+
    "\2\0\7\26\1\354\20\26\22\0\5\26\5\0\23\26"+
    "\2\0\5\26\1\355\22\26\22\0\5\26\5\0\15\26"+
    "\1\356\5\26\2\0\30\26\22\0\5\26\5\0\20\26"+
    "\1\357\2\26\2\0\30\26\22\0\3\323\2\26\5\0"+
    "\23\26\2\0\30\26\22\0\4\360\1\26\5\0\23\26"+
    "\2\0\30\26\22\0\5\26\5\0\23\26\2\0\7\26"+
    "\1\361\20\26\22\0\5\26\5\0\23\26\2\0\1\26"+
    "\1\362\26\26\22\0\5\26\5\0\23\26\2\0\1\26"+
    "\1\363\26\26\22\0\5\26\5\0\23\26\2\0\15\26"+
    "\1\364\12\26\22\0\5\26\5\0\23\26\2\0\1\365"+
    "\27\26\22\0\5\26\5\0\23\26\2\0\1\26\1\366"+
    "\26\26\22\0\5\26\5\0\23\26\2\0\5\26\1\367"+
    "\22\26\22\0\5\26\5\0\23\26\2\0\3\26\1\370"+
    "\24\26\22\0\5\26\5\0\23\26\2\0\11\26\1\371"+
    "\16\26\22\0\5\26\5\0\23\26\2\0\5\26\1\372"+
    "\22\26\22\0\5\26\5\0\23\26\2\0\4\26\1\373"+
    "\23\26\22\0\5\26\5\0\23\26\2\0\4\26\1\374"+
    "\23\26\22\0\5\26\5\0\23\26\2\0\15\26\1\375"+
    "\12\26\22\0\5\26\5\0\23\26\2\0\7\26\1\376"+
    "\20\26\22\0\5\26\5\0\23\26\2\0\22\26\1\377"+
    "\5\26\22\0\5\26\5\0\23\26\2\0\10\26\1\u0100"+
    "\17\26\22\0\5\26\5\0\23\26\2\0\15\26\1\u0101"+
    "\12\26\22\0\5\26\5\0\21\26\1\u0102\1\26\2\0"+
    "\30\26\22\0\5\26\5\0\16\26\1\u0103\3\26\1\u0104"+
    "\2\0\30\26\22\0\5\26\5\0\23\26\2\0\2\26"+
    "\1\u0105\25\26\22\0\5\26\5\0\23\26\2\0\15\26"+
    "\1\u0106\12\26\22\0\5\26\5\0\23\26\2\0\23\26"+
    "\1\u0107\4\26\22\0\5\26\5\0\23\26\2\0\14\26"+
    "\1\u0108\4\26\1\u0109\6\26\22\0\5\26\5\0\23\26"+
    "\2\0\13\26\1\u010a\14\26\22\0\5\26\5\0\23\26"+
    "\2\0\10\26\1\u010b\17\26\22\0\5\26\5\0\23\26"+
    "\2\0\16\26\1\u010c\11\26\22\0\5\26\5\0\23\26"+
    "\2\0\20\26\1\u010d\7\26\22\0\5\26\5\0\23\26"+
    "\2\0\5\26\1\u010e\22\26\22\0\5\26\5\0\23\26"+
    "\2\0\23\26\1\u010f\4\26\22\0\5\26\5\0\23\26"+
    "\2\0\5\26\1\u0110\22\26\22\0\5\26\5\0\11\26"+
    "\1\u0111\11\26\2\0\30\26\22\0\5\26\5\0\23\26"+
    "\2\0\5\26\1\u0112\22\26\22\0\5\26\5\0\23\26"+
    "\2\0\20\26\1\u0113\7\26\22\0\5\26\5\0\23\26"+
    "\2\0\13\26\1\u0114\14\26\22\0\5\26\5\0\23\26"+
    "\2\0\5\26\1\u0115\22\26\22\0\5\26\5\0\23\26"+
    "\2\0\21\26\1\u0116\6\26\22\0\5\26\5\0\16\26"+
    "\1\u0117\3\26\1\u0118\2\0\30\26\22\0\5\26\5\0"+
    "\23\26\2\0\15\26\1\u0119\12\26\22\0\5\26\5\0"+
    "\23\26\2\0\20\26\1\u011a\7\26\22\0\5\26\5\0"+
    "\23\26\2\0\4\26\1\u011b\23\26\22\0\5\26\5\0"+
    "\11\26\1\u011c\11\26\2\0\30\26\22\0\5\26\5\0"+
    "\23\26\2\0\1\26\1\u011d\4\26\1\u011e\21\26\22\0"+
    "\5\26\5\0\23\26\2\0\11\26\1\u011f\16\26\22\0"+
    "\5\26\5\0\23\26\2\0\5\26\1\u0120\22\26\22\0"+
    "\5\26\5\0\23\26\2\0\5\26\1\u0121\22\26\22\0"+
    "\5\26\5\0\23\26\2\0\20\26\1\u0122\7\26\22\0"+
    "\5\26\5\0\23\26\2\0\5\26\1\u0123\22\26\22\0"+
    "\5\26\5\0\21\26\1\u0124\1\26\2\0\30\26\22\0"+
    "\5\26\5\0\23\26\2\0\4\26\1\u0125\23\26\22\0"+
    "\5\26\5\0\23\26\2\0\5\26\1\u0126\22\26\22\0"+
    "\5\26\5\0\23\26\2\0\22\26\1\u0127\5\26\22\0"+
    "\5\26\5\0\23\26\2\0\1\26\1\u0128\26\26\22\0"+
    "\5\26\5\0\23\26\2\0\11\26\1\u0129\16\26\22\0"+
    "\5\26\5\0\15\26\1\u012a\5\26\2\0\30\26\22\0"+
    "\5\26\5\0\23\26\2\0\20\26\1\u012b\7\26\22\0"+
    "\5\26\5\0\23\26\2\0\5\26\1\u012c\22\26\22\0"+
    "\5\26\5\0\23\26\2\0\4\26\1\u012d\23\26\22\0"+
    "\5\26\5\0\23\26\2\0\22\26\1\u012e\5\26\22\0"+
    "\5\26\5\0\23\26\2\0\5\26\1\u012f\22\26\22\0"+
    "\5\26\5\0\23\26\2\0\5\26\1\u0130\22\26\22\0"+
    "\5\26\5\0\23\26\2\0\15\26\1\u0131\12\26\22\0"+
    "\5\26\5\0\23\26\2\0\3\26\1\u0132\24\26\22\0"+
    "\5\26\5\0\23\26\2\0\5\26\1\u0133\22\26\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16352];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\2\11\2\1\1\11\5\1\2\11"+
    "\14\1\2\11\17\1\1\11\1\1\2\11\1\0\2\11"+
    "\1\1\7\11\1\0\1\1\1\11\3\0\5\11\52\1"+
    "\1\11\1\1\1\11\1\0\1\1\1\0\54\1\1\11"+
    "\215\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token;
    private Object lval;
    
    @Override
	public Object getLVal() {
	return lval;
    }
    
    @Override
	public void yyerror(String msg) {
	System.err.printf("*** ERROR: %s (line:%s, column:%s)\n", 
			  msg, 
			  (token!=null) ? token.getLineno()+1 : "n", 
			  (token!=null) ? token.getColumnno()+1 : "n");
    }
    
    @Override
	public int yylex() throws java.io.IOException {
	next_token();
	if (token != null)
	    return token.getCode();
	else
	    return 0;
    }

	
    public Token makeToken(int code){
		token = new Token(code, yyline, yycolumn);
		lval = token;
	
		// Uncomment the following lines to trace
		//
		/*** */
		if (code < 256)
	    	System.err.printf("*** TOKEN: '%c' (line:%d, column:%d)\n", code, yyline+1, yycolumn+1); 
		else
	    	System.err.printf("*** TOKEN: " + code + " (line:%d, column:%d)\n", yyline+1, yycolumn+1); 
		/* ***/
		return token;
    }
    
    public Token makeToken(int code, Object lval){
		token = new Token(code, yyline, yycolumn);
		this.lval = lval;
		// Uncomment to trace
		//
		/*** */
		switch (code){
		case PIN:
	    	System.err.printf("*** TOKEN: PIN=" + lval + " (line:%d, column:%d)\n", yyline+1, yycolumn+1);
	    	break;
		case HEXA:
	    	System.err.printf("*** TOKEN: HEXA=" + lval + " (line:%d, column:%d)\n", yyline+1, yycolumn+1);
	    	break;
		case BINAIRE:
	    	System.err.printf("*** TOKEN: BINAIRE=" + lval + " (line:%d, column:%d)\n", yyline+1, yycolumn+1);
	    	break;
		case INTEGER:
	    	System.err.printf("*** TOKEN: INTEGER=" + lval + " (line:%d, column:%d)\n", yyline+1, yycolumn+1); 	
	    	break;
		case FLOAT:
	    	System.err.printf("*** TOKEN: FLOAT=" + lval + " (line:%d, column:%d)\n", yyline+1, yycolumn+1);
	    	break;
		case IDENTIFIER:
	    	System.err.printf("*** TOKEN: IDENTIFIER=" + lval + " (line:%d, column:%d)\n", yyline+1, yycolumn+1); 	
	    	break;
		default:
	    	if (code < 256)
				System.err.printf("*** TOKEN: '%c' (line:%d, column:%d)\n", code, yyline+1, yycolumn+1); 
	    	else
				//System.err.printf("*** TOKEN: " + Parser.yytname(code) + " (line:%d, column:%d)\n", yyline+1, yycolumn+1); 
				System.err.printf("*** TOKEN: " + code + " (line:%d, column:%d)\n", yyline+1, yycolumn+1); 
		}	
		/* ***/
		return token;
    }
    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token next_token() throws java.io.IOException, java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 103: break;
          case 2:
            { return makeToken('!');
            }
            // fall through
          case 104: break;
          case 3:
            { return makeToken('%');
            }
            // fall through
          case 105: break;
          case 4:
            { return makeToken('&');
            }
            // fall through
          case 106: break;
          case 5:
            { return makeToken('(');
            }
            // fall through
          case 107: break;
          case 6:
            { return makeToken(')');
            }
            // fall through
          case 108: break;
          case 7:
            { return makeToken('*');
            }
            // fall through
          case 109: break;
          case 8:
            { return makeToken('+');
            }
            // fall through
          case 110: break;
          case 9:
            { return makeToken(',');
            }
            // fall through
          case 111: break;
          case 10:
            { return makeToken('-');
            }
            // fall through
          case 112: break;
          case 11:
            { return makeToken('/');
            }
            // fall through
          case 113: break;
          case 12:
            { return makeToken(INTEGER, Long.parseLong(yytext()));
            }
            // fall through
          case 114: break;
          case 13:
            { return makeToken(':');
            }
            // fall through
          case 115: break;
          case 14:
            { return makeToken(';');
            }
            // fall through
          case 116: break;
          case 15:
            { return makeToken('<');
            }
            // fall through
          case 117: break;
          case 16:
            { return makeToken('=');
            }
            // fall through
          case 118: break;
          case 17:
            { return makeToken('>');
            }
            // fall through
          case 119: break;
          case 18:
            { return makeToken(IDENTIFIER, yytext());
            }
            // fall through
          case 120: break;
          case 19:
            { return makeToken('[');
            }
            // fall through
          case 121: break;
          case 20:
            { return makeToken(']');
            }
            // fall through
          case 122: break;
          case 21:
            { return makeToken('{');
            }
            // fall through
          case 123: break;
          case 22:
            { return makeToken('|');
            }
            // fall through
          case 124: break;
          case 23:
            { return makeToken('}');
            }
            // fall through
          case 125: break;
          case 24:
            { return makeToken(NE_TOKEN);
            }
            // fall through
          case 126: break;
          case 25:
            { return makeToken(STRING, yytext().substring(1, yytext().length()-1));
            }
            // fall through
          case 127: break;
          case 26:
            { return makeToken(CE_TOKEN);
            }
            // fall through
          case 128: break;
          case 27:
            { return makeToken(AA_TOKEN);
            }
            // fall through
          case 129: break;
          case 28:
            { return makeToken(AE_TOKEN);
            }
            // fall through
          case 130: break;
          case 29:
            { return makeToken(TE_TOKEN);
            }
            // fall through
          case 131: break;
          case 30:
            { return makeToken(PP_TOKEN);
            }
            // fall through
          case 132: break;
          case 31:
            { return makeToken(PE_TOKEN);
            }
            // fall through
          case 133: break;
          case 32:
            { return makeToken(MM_TOKEN);
            }
            // fall through
          case 134: break;
          case 33:
            { return makeToken(ME_TOKEN);
            }
            // fall through
          case 135: break;
          case 34:
            { return makeToken(DOTS_TOKEN);
            }
            // fall through
          case 136: break;
          case 35:
            { return makeToken(DE_TOKEN);
            }
            // fall through
          case 137: break;
          case 36:
            { return makeToken(LL_TOKEN);
            }
            // fall through
          case 138: break;
          case 37:
            { return makeToken(LE_TOKEN);
            }
            // fall through
          case 139: break;
          case 38:
            { return makeToken(EQ_TOKEN);
            }
            // fall through
          case 140: break;
          case 39:
            { return makeToken(GE_TOKEN);
            }
            // fall through
          case 141: break;
          case 40:
            { return makeToken(GG_TOKEN);
            }
            // fall through
          case 142: break;
          case 41:
            { return makeToken(BINAIRE,Integer.parseInt(yytext().substring(1),2));
            }
            // fall through
          case 143: break;
          case 42:
            { return makeToken(DO_KEYWORD);
            }
            // fall through
          case 144: break;
          case 43:
            { return makeToken(IF_KEYWORD);
            }
            // fall through
          case 145: break;
          case 44:
            { return makeToken(IN_KEYWORD);
            }
            // fall through
          case 146: break;
          case 45:
            { return makeToken(OF_KEYWORD);
            }
            // fall through
          case 147: break;
          case 46:
            { return makeToken(OE_TOKEN);
            }
            // fall through
          case 148: break;
          case 47:
            { return makeToken(OO_TOKEN);
            }
            // fall through
          case 149: break;
          case 48:
            { return makeToken(AAE_TOKEN);
            }
            // fall through
          case 150: break;
          case 49:
            { return makeToken(FLOAT, Float.parseFloat(yytext()));
            }
            // fall through
          case 151: break;
          case 50:
            { return makeToken(HEXA,Integer.parseInt(yytext().substring(2),16));
            }
            // fall through
          case 152: break;
          case 51:
            { return makeToken(LOW_KEYWORD);
            }
            // fall through
          case 153: break;
          case 52:
            { return makeToken(END_KEYWORD);
            }
            // fall through
          case 154: break;
          case 53:
            { return makeToken(PIN_KEYWORD);
            }
            // fall through
          case 155: break;
          case 54:
            { return makeToken(SET_KEYWORD);
            }
            // fall through
          case 156: break;
          case 55:
            { return makeToken(OOE_TOKEN);
            }
            // fall through
          case 157: break;
          case 56:
            { return makeToken(HIGH_KEYWORD);
            }
            // fall through
          case 158: break;
          case 57:
            { return makeToken(TRUE_KEYWORD);
            }
            // fall through
          case 159: break;
          case 58:
            { return makeToken(BYTE_KEYWORD);
            }
            // fall through
          case 160: break;
          case 59:
            { return makeToken(CASE_KEYWORD);
            }
            // fall through
          case 161: break;
          case 60:
            { return makeToken(ELSE_KEYWORD);
            }
            // fall through
          case 162: break;
          case 61:
            { return makeToken(ENUM_KEYWORD);
            }
            // fall through
          case 163: break;
          case 62:
            { return makeToken(GETC_KEYWORD);
            }
            // fall through
          case 164: break;
          case 63:
            { return makeToken(LIST_KEYWORD);
            }
            // fall through
          case 165: break;
          case 64:
            { return makeToken(LONG_KEYWORD);
            }
            // fall through
          case 166: break;
          case 65:
            { return makeToken(LOOP_KEYWORD);
            }
            // fall through
          case 167: break;
          case 66:
            { return makeToken(PEEK_KEYWORD);
            }
            // fall through
          case 168: break;
          case 67:
            { return makeToken(PUTC_KEYWORD);
            }
            // fall through
          case 169: break;
          case 68:
            { return makeToken(PUTS_KEYWORD);
            }
            // fall through
          case 170: break;
          case 69:
            { return makeToken(FALSE_KEYWORD);
            }
            // fall through
          case 171: break;
          case 70:
            { return makeToken(INPUT_KEYWORD);
            }
            // fall through
          case 172: break;
          case 71:
            { return makeToken(PIN, Integer.parseInt(yytext().substring(4)));
            }
            // fall through
          case 173: break;
          case 72:
            { return makeToken(BEGIN_KEYWORD);
            }
            // fall through
          case 174: break;
          case 73:
            { return makeToken(BREAK_KEYWORD);
            }
            // fall through
          case 175: break;
          case 74:
            { return makeToken(FLOAT_KEYWORD);
            }
            // fall through
          case 176: break;
          case 75:
            { return makeToken(FLUSH_KEYWORD);
            }
            // fall through
          case 177: break;
          case 76:
            { return makeToken(RANGE_KEYWORD);
            }
            // fall through
          case 178: break;
          case 77:
            { return makeToken(SHORT_KEYWORD);
            }
            // fall through
          case 179: break;
          case 78:
            { return makeToken(WHILE_KEYWORD);
            }
            // fall through
          case 180: break;
          case 79:
            { return makeToken(OUTPUT_KEYWORD);
            }
            // fall through
          case 181: break;
          case 80:
            { return makeToken(PIN, Integer.parseInt(yytext().substring(5))+14);
            }
            // fall through
          case 182: break;
          case 81:
            { return makeToken(DOUBLE_KEYWORD);
            }
            // fall through
          case 183: break;
          case 82:
            { return makeToken(RETURN_KEYWORD);
            }
            // fall through
          case 184: break;
          case 83:
            { return makeToken(STRING_KEYWORD);
            }
            // fall through
          case 185: break;
          case 84:
            { return makeToken(STRUCT_KEYWORD);
            }
            // fall through
          case 186: break;
          case 85:
            { return makeToken(SWITCH_KEYWORD);
            }
            // fall through
          case 187: break;
          case 86:
            { return makeToken(BOOLEAN_KEYWORD);
            }
            // fall through
          case 188: break;
          case 87:
            { return makeToken(DELAY_S_KEYWORD);
            }
            // fall through
          case 189: break;
          case 88:
            { return makeToken(FOREACH_KEYWORD);
            }
            // fall through
          case 190: break;
          case 89:
            { return makeToken(INTEGER_KEYWORD);
            }
            // fall through
          case 191: break;
          case 90:
            { return makeToken(PINMODE_KEYWORD);
            }
            // fall through
          case 192: break;
          case 91:
            { return makeToken(CONTINUE_KEYWORD);
            }
            // fall through
          case 193: break;
          case 92:
            { return makeToken(DELAY_MS_KEYWORD);
            }
            // fall through
          case 194: break;
          case 93:
            { return makeToken(FUNCTION_KEYWORD);
            }
            // fall through
          case 195: break;
          case 94:
            { return makeToken(UNSIGNED_KEYWORD);
            }
            // fall through
          case 196: break;
          case 95:
            { return makeToken(AVAILABLE_KEYWORD);
            }
            // fall through
          case 197: break;
          case 96:
            { return makeToken(PROCEDURE_KEYWORD);
            }
            // fall through
          case 198: break;
          case 97:
            { return makeToken(ANALOGREAD_KEYWORD);
            }
            // fall through
          case 199: break;
          case 98:
            { return makeToken(INPUTPULLUP_KEYWORD);
            }
            // fall through
          case 200: break;
          case 99:
            { return makeToken(ANALOGWRITE_KEYWORD);
            }
            // fall through
          case 201: break;
          case 100:
            { return makeToken(DIGITALREAD_KEYWORD);
            }
            // fall through
          case 202: break;
          case 101:
            { return makeToken(DIGITALWRITE_KEYWORD);
            }
            // fall through
          case 203: break;
          case 102:
            { return makeToken(ANALOGREFERENCE_KEYWORD);
            }
            // fall through
          case 204: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
